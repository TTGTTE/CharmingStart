
// Экзамен и небольшая тренировка

// Структура в языке C и C++

// Блочно-структурируемый язык
// Имеет главную функцию (main)
// Каждое действие заканчивается точкой с запятой

// Также язык имеет библиотеки - коллекция классов и функций
#include <iostream>
#include <windows.h>

// Нэймспейсы используются для группировки классов, объектов и функций под именем 
using namespace std;


// Сама структура
// Главная функция
int main()
{

    // Типы переменных в Си-языках указываются до её названия
    // Существует несколько типов данных:
    // Целочисленные (short, int, long), при добавлении unsigned эти типы могут хранить только положительные числа
    // Числа с точкой (действительные) - float и double
    // Логический bool для записи истинного или ложного значения
    // Символьный char для хранения символов

    int a; // Создали переменную без значения типа int с названием "a"
    short b = 1; // Создали переменную "b" типа short, в котором хранится значение 1

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    // Инициализация это присвоение значения для переменной
    // Её можно сделать сразу же после её объявления
    // Глобально (до главной функции), или статично (только один раз)
    // Обычно им присвается ноль без иницилизации, 
    // Но нестатичные локальные переменные имеют неопределённое значение

    // Для инициализации при объявлении нужно:
    int a1 = 0; // Записать тип данных, название, и значение переменной
    // Можно ещё:
    int b2 = 2, c2 = 4, d2 = 6;
    // Или:
    int a2 = 0, a3 = a2;

    // Над переменными можно проводить операции
    // Операции над двумя объектами - бинарные
    // Арифмитические операции, например:
    a1 = b2 + c2; // Сумма
    a1 = d2 / b2; // Деление

    // Однако арифметические операции могут объединены с операцией присваивания 
    a1 *= d2;

    // Унарные операции - операции над одним объектом
    a2 += 1;
    cout << a2 << endl; // На экран выведет 1

    // Можно использовать инкременты или декременты
    // Префиксный:
    ++a2;
    cout << a2 << endl; // Выведет уже 2
    // Постфиксный
    a2--;
    cout << a2 << endl; // И опять выведет 1

    // Но в чём разница?
    int o1 = 0, o2 = 0, q1 = 2, p1 = 3, q2 = 2, p2 = 3;
    // Если операция расположена до объекта, 
    // то сначала происходит изменение значения переменной на 1, 
    // а потом это значение используется для выполнения следующих операций
    o1 = q1*++p1;
    cout << o1 << endl; // Выведет 8

    // Если операция ++ или — расположена после переменной, 
    // то сначала выполняется операция, а потом значение переменной изменяется на 1.
    o2 = q2*p2++;
    cout << o2 << endl; // Выведет 6

    // Для вывода на экран в языке Си нужно использовать printf(%[флаги][ширина][.точность][длина]спецификатор)

    // Спецификаторы могут быть:
    // %d или %i - для целых чисел
    // %f - для чисел с точкой
    // %e - экспонента
    // %c - символ, %s - строка
    // %p - адрес указателя
    // %% - вывод процента

    // Флаги могут быть:
    // - выключка влево на заданное шириной значение
    // + указатель знаков
    // (пробел) вставка пробела
    // # вставка десятичной точки
    // 0 вставка нулей с широиной

    // Определитель ширины:
    // (число) минимум количества знаков для вывода
    // * тоже самое, только передаётся в виде аргумента

    // Определитель точности:
    // .(число) количество знаков после разряда
    // .* тоже самое, только аргумент

    // Для ввода используется чаще всего scanf(%[*][ширина][длинна]спецификатор)
    
    // Спецификаторы такие же как и у операции вывода
    // Ширина тоже, как длинна

    // Имеются также функции:
    // getch() - возрващает символ, не выводя его
    // fgets() - считывает строку с пробелами, работает не только с файлами
    // Некоторые из функций небезопасны, может произойти утечка памяти

    // Для вывода на экран в С++ необходимо использовать cout <<, (std::cout без неймспейса для std)
    // Для ввода - cin >>, (std::cin без неймспейса)

    // В С++ cout выводит заданные типы данных при объявлении переменной

    cout << "Привет!";

    // Форматирующие функции:
    // cout.fill('/*сивол*/') - устанавливает символ заполнитель
    // cout.width(/*ширина*/) - задает ширину поля
    // cout.precision(/*число*/) - задаёт количество знаков после запятой
    
    // Можно также подключить флаг форматирования при помощи:
    // setf() и unsetf() 
    // Некоторые флаги:
    // boolalpha - логика
    // showpos - для вывода знаков положительных чисел
    // scientific - экспонента

    // Также есть манипуляторы форматирования:
    // endl - новая строка
    // boolalpha и noboolalpha - логика
    // setprecision(число) - задаёт количество знаков после запятой
    // setfill(int symbol) - задаёт символ-заполнитель 

    // Непечатные символы для си и с++:
    // \a - звук
    // \f - новая страница
    // \n - новая строка
    // \t - табуляция, \v - вертикальная табуляция
    // \" - ковычки, \\ - обратный слеш

    // Операторы условия



    return 0;
}